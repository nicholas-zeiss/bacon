const tsv  = require('./tsvUtils');


function cleanBasics() {
	
	let basicsInput = {
		file: 'title.basics.tsv',
		matches: new Set(),
		cb: function(row) {
			let movie = row.match(/^(tt\d{7})\t([^\t]+)\t([^\t\n]+)/);

			if (movie && movie[2] == 'movie') {
				this.matches.add(movie[1]);
			}
		}
	};

	let basicsOutput = {
		file: 'movie.basics.tsv',
		cb: function(row, stream) {
			let movie = row.match(/^(tt\d{7})\t([^\t]+)\t([^\t\n]+)/);

			if (movie && movie[2] == 'movie') {
				stream.write(`${movie[1]}\t${movie[3]}\n`);
			}
		}
	};

	return tsv.traverseTSV(basicsInput, basicsOutput);
}


//requires a set of tconsts to be preserved, generated by cleanBasics
function cleanPrincipals(tconsts) {
	
	let principalsInput = {
		file: 'title.principals.tsv',
		matches: null,
		cb: function() {}
	};

	let principalsOutput = {
		file: 'movie.principals.tsv',
		tconsts: tconsts,
		cb: function(row, stream) {
			let tconst = row.match(/^(tt\d{7})\t/);

			if (tconst && this.tconsts.has(tconst[1])) {
				stream.write(row);
			}
		}
	};

	return tsv.traverseTSV(principalsInput, principalsOutput);
}	


function cleanNames() {
	
	let namesInput = {
		file: 'name.basics.tsv',
		matches: null,
		cb: function() {}
	};

	let namesOutput = {
		file: 'names.tsv',
		cb: function(row, stream) {
			let clipped = row.match(/^nm\d{7}\t[^\t\n]+/);
			if (clipped) {
				stream.write(clipped[0] + '\n');
			}
		}
	};

	return tsv.traverseTSV(namesInput, namesOutput);
}

cleanBasics().then(tconsts => {
	console.log('cleaned basics');
	return cleanPrincipals(tconsts);
}).then(() => {
	console.log('cleaned principals');
	return cleanNames();
}).then(() => {
	console.log('cleaned names');
})




